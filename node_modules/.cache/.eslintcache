[{"/Users/raphaelhebert/Desktop/snake/src/index.js":"1","/Users/raphaelhebert/Desktop/snake/src/reportWebVitals.js":"2","/Users/raphaelhebert/Desktop/snake/src/App.js":"3","/Users/raphaelhebert/Desktop/snake/src/component/snake/index.js":"4","/Users/raphaelhebert/Desktop/snake/src/component/ScoreBar.js":"5","/Users/raphaelhebert/Desktop/snake/src/component/Lost.js":"6","/Users/raphaelhebert/Desktop/snake/src/component/SnakeForm.js":"7","/Users/raphaelhebert/Desktop/snake/src/component/RegisterForm.js":"8"},{"size":589,"mtime":1646484779735,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1645970390054,"results":"11","hashOfConfig":"10"},{"size":1119,"mtime":1646485098284,"results":"12","hashOfConfig":"10"},{"size":5046,"mtime":1646482273368,"results":"13","hashOfConfig":"10"},{"size":212,"mtime":1646482848894,"results":"14","hashOfConfig":"10"},{"size":381,"mtime":1646282804038,"results":"15","hashOfConfig":"10"},{"size":1163,"mtime":1646494053745,"results":"16","hashOfConfig":"10"},{"size":3532,"mtime":1646529900058,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"18wtumh",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"21"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},"/Users/raphaelhebert/Desktop/snake/src/index.js",[],[],["46","47"],"/Users/raphaelhebert/Desktop/snake/src/reportWebVitals.js",[],[],["48","49"],"/Users/raphaelhebert/Desktop/snake/src/App.js",["50","51"],[],"/Users/raphaelhebert/Desktop/snake/src/component/snake/index.js",["52"],[],"import { useState, useEffect } from 'react'\n\n\nimport ScoreBar from '../ScoreBar'\nimport SnakeForm from '../SnakeForm'\nimport '../../App.css'\n\n\n\nconst Snake = ({ apple, applePos, loose, score }) => {\n    const [head, setHead] = useState([48, 48]) //top, left\n    const [play, setPlay] = useState(false)\n    const [body, setBody] = useState([])\n    const [direction, setDirection] = useState('ArrowRight') //setup for starts and checks snake does go in unauthorized direction\n    const [speed, setSpeed] = useState(200)\n\n    const appleTop = apple[0] + '%'\n    const appleLeft = apple[1] +  '%'\n\n    const headTop = head[0] + '%'\n    const headLeft = head[1] + '%'\n\n    //handle options form\n    const handleChange = e => {\n        setSpeed(parseInt(e.target.value))\n    }\n\n    const headPos = (direction) => {\n        switch(direction){\n          case \"ArrowRight\":\n            setHead([head[0], (head[1] + 2) % 100])\n            break\n          case \"ArrowLeft\":\n            setHead([head[0], (100 + (head[1] - 2)) % 100])\n            break\n          case \"ArrowDown\":\n            setHead([ (head[0] + 2) % 100, head[1]])\n            break\n          case \"ArrowUp\":\n            setHead([(100 + (head[0] - 2)) % 100, head[1]]);\n            break\n          default:\n            break;\n        }\n    }\n    \n    const handleKeyDown = e => {\n        e.preventDefault();\n        if(body.length > 0){\n            switch(e.key){\n                case \"ArrowUp\":\n                    if(direction === \"ArrowDown\" || direction === \"ArrowUp\"){\n                        return\n                    } \n                    break;\n                case \"ArrowDown\":\n                    if(direction === \"ArrowUp\" || direction === \"ArrowDown\"){\n                        return\n                    }\n                    break;\n                case \"ArrowRight\":\n                    if(direction === \"ArrowLeft\" || direction === \"ArrowRight\"){\n                        return\n                    }\n                    break;\n                case \"ArrowLeft\":\n                    if(direction === \"ArrowLeft\" || direction === \"ArrowRight\"){\n                        return\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n        if([\"ArrowUp\", \"ArrowLeft\", \"ArrowRight\", \"ArrowDown\"].includes(e.key)){\n            window.localStorage.setItem(\"snakeRunner\", JSON.stringify({'direction': e.key}))\n        }\n        // else if(e.key === \"Enter\"){\n        //     if(!play){\n        //         setPlay(!play);\n        //         setHead([head[0], head[1]])\n        //     }\n        // }\n    }\n\n    const clickPlay = () => {\n        if(!play){\n            setPlay(!play);\n            setHead([head[0], head[1]])\n        }\n    }\n\n    useEffect(() => {\n        const bodySearch = 'o' + body.join('o').toString() + 'o'\n        console.log(bodySearch)\n        const headCheck = \"o\" + [head[0] + '%', head[1] + '%'].toString() + \"o\"\n        console.log(headCheck)\n        if(bodySearch.includes(headCheck)){\n            setPlay(false)\n            loose();\n        }\n        setTimeout(() => {\n            const storage = window.localStorage.getItem(\"snakeRunner\")\n            const newDirection = JSON.parse(storage)\n            if(play && [\"ArrowUp\", \"ArrowLeft\", \"ArrowRight\", \"ArrowDown\"].includes(newDirection.direction)){\n                if(head[0] === apple[0] && head[1] === apple[1]){\n                    setBody([[headTop, headLeft], ...body])\n                    applePos()\n                } else {\n                    if(body.length > 0){\n                        const newBody = body.slice(0, body.length - 1)\n                        newBody.unshift([headTop, headLeft])\n                        setBody(newBody)\n                    }\n                }\n                setDirection(newDirection.direction);\n                headPos(newDirection.direction);\n            }   \n        }, speed)\n    }, [head])\n\n    return(\n        <div className='main' onKeyDown={handleKeyDown} tabIndex=\"0\">\n            <div className=\"flexColCenter sideDiv\">\n                <h1>The Snake</h1>\n                <p>This is the snake, you know the rules...\n                Press <span>Play !</span> to start playing and use the <span>arrow keys</span> on your keyboard to change the snake's direction.</p>\n                <SnakeForm handleChange={handleChange} speed={speed} play={play} clickPlay={clickPlay}/>\n                <ScoreBar score={score >= 0? score: 0} />\n            </div>\n            <div className='container'>\n                <div className='screen'>\n                    <div className=\"apple\" style={{top: appleTop, left: appleLeft }} />\n                    <div className=\"head\" style={{top: headTop, left: headLeft }}/>\n                    { body.length > 0 && body.map(bodyPart => \n                            <div className=\"bodyPart\" style={{top: bodyPart[0], left: bodyPart[1] }}/>\n\n                    )}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Snake;","/Users/raphaelhebert/Desktop/snake/src/component/ScoreBar.js",[],[],"/Users/raphaelhebert/Desktop/snake/src/component/Lost.js",[],[],"/Users/raphaelhebert/Desktop/snake/src/component/SnakeForm.js",[],[],"/Users/raphaelhebert/Desktop/snake/src/component/RegisterForm.js",["53"],[],"import { useState, useEffect } from 'react'\nimport * as yup from 'yup'\nimport axios from 'axios'\n\nimport '../App.css'\n\n\nconst handleSubmit = e => {\n    e.preventDefault()\n    //post to the backend\n}\n\nconst schema = yup.object().shape({\n    uname: yup\n        .string()\n        .required(\"a username is required\")\n        .min(3, \"must be at least 3 characters long\")\n        .max(24, \"username is 24 characters max\"),\n    email: yup\n        .string()\n        .email('Must be a valid email')\n        .max(255)\n        .required('Email is required'),\n    password: yup\n        .string()\n        .required('Please Enter your password')\n        .matches(\n        /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\n        \"Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character\"\n        ),\n    passwordConfirmation: yup\n        .string()\n        .oneOf([yup.ref('password'), null], 'Passwords must match')\n\n})\n\nconst RegisterForm = () => {\n    const[disable, setDisable]= useState(true)\n    const[formData, setFormData] = useState({\n        uname: \"\",\n        email: \"\",\n        password: \"\",\n        passwordConfirmation: \"\"\n    })\n\n    const[formErrors, setFormErrors] = useState({\n        uname: \"\",\n        email: \"\",\n        password: \"\",\n        passwordConfirmation: \"\"\n    })\n\n    const handleFormError = (name, value) => {\n        yup.reach(schema, name).validate(value)\n            .then(() => {\n                setFormErrors({\n                    ...formErrors,\n                    [name]: ''\n                })\n            })\n            .catch(err => {\n                setFormErrors({\n                    ...formErrors,\n                    [name]: err.errors[0]\n                })\n            })\n    }\n\n    const handleChange = e => {\n        const {name, value} = e.target\n        setFormData({\n            ...formData,\n            [name]: value,\n        })\n        handleFormError(name, value)\n    }\n\n    useEffect(() => {\n        schema.isValid(formData)\n            .then(valid => setDisable(!valid))\n    }, [formData])\n\n    return(\n        <div className=\"flexColCenter\">\n            <h2> Sign up!</h2>\n            <p> Sign up to be able to login and compete with the other players</p>\n            <form className=\"formLabels signForms\" onSubmit={handleSubmit}>\n                <label className=\"formLabels\"> Username: \n                    <input name='uname' onChange={handleChange} value={formData.uname} type=\"text\" maxlength=\"24\"/>\n                    <p>{formErrors.uname}</p>\n                </label>\n                <label className=\"formLabels\"> email: \n                    <input name='email' onChange={handleChange} value={formData.email} type=\"email\" maxlength=\"255\"/>\n                    <p>{formErrors.email}</p>\n                </label>\n                <label className=\"formLabels\"> Password: \n                    <input name='password' onChange={handleChange} value={formData.password} type=\"password\" />\n                    <p>{formErrors.password}</p>\n                </label>\n                <label className=\"formLabels\"> Password confirmation: \n                    <input name='passwordConfirmation' onChange={handleChange} value={formData.passwordConfirmation} type=\"password\" />\n                    <p>{formErrors.passwordConfirmation}</p>\n                </label>\n                <button className=\"signButton\" type=\"submit\" disabled={disable}>Register !</button>\n            </form>\n        </div>\n    )\n}\nexport default RegisterForm;",{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"54","replacedBy":"58"},{"ruleId":"56","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":31,"column":31,"nodeType":"62","endLine":31,"endColumn":33,"suggestions":"63"},{"ruleId":"64","severity":1,"message":"65","line":38,"column":105,"nodeType":"66","messageId":"67","endLine":38,"endColumn":118},{"ruleId":"60","severity":1,"message":"68","line":120,"column":8,"nodeType":"62","endLine":120,"endColumn":14,"suggestions":"69"},{"ruleId":"70","severity":1,"message":"71","line":3,"column":8,"nodeType":"72","messageId":"73","endLine":3,"endColumn":13},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],["74"],["75"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'applePos'. Either include it or remove the dependency array.","ArrayExpression",["76"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","React Hook useEffect has missing dependencies: 'apple', 'applePos', 'body', 'headLeft', 'headPos', 'headTop', 'loose', 'play', and 'speed'. Either include them or remove the dependency array. If 'loose' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["77"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"78","fix":"79"},{"desc":"80","fix":"81"},"Update the dependencies array to be: [applePos]",{"range":"82","text":"83"},"Update the dependencies array to be: [apple, applePos, body, head, headLeft, headPos, headTop, loose, play, speed]",{"range":"84","text":"85"},[766,768],"[applePos]",[3947,3953],"[apple, applePos, body, head, headLeft, headPos, headTop, loose, play, speed]"]
[{"/Users/raphaelhebert/Desktop/snake/src/index.js":"1","/Users/raphaelhebert/Desktop/snake/src/reportWebVitals.js":"2","/Users/raphaelhebert/Desktop/snake/src/App.js":"3","/Users/raphaelhebert/Desktop/snake/src/component/snake/index.js":"4","/Users/raphaelhebert/Desktop/snake/src/component/ScoreBar.js":"5","/Users/raphaelhebert/Desktop/snake/src/component/Lost.js":"6","/Users/raphaelhebert/Desktop/snake/src/component/SnakeForm.js":"7"},{"size":501,"mtime":1646569113102,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1645970390054,"results":"10","hashOfConfig":"9"},{"size":924,"mtime":1646569862115,"results":"11","hashOfConfig":"9"},{"size":5276,"mtime":1646572186449,"results":"12","hashOfConfig":"9"},{"size":212,"mtime":1646482848894,"results":"13","hashOfConfig":"9"},{"size":381,"mtime":1646282804038,"results":"14","hashOfConfig":"9"},{"size":1162,"mtime":1646569113091,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"18wtumh",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/raphaelhebert/Desktop/snake/src/index.js",[],[],"/Users/raphaelhebert/Desktop/snake/src/reportWebVitals.js",[],[],["39","40"],"/Users/raphaelhebert/Desktop/snake/src/App.js",["41","42","43"],[],"/Users/raphaelhebert/Desktop/snake/src/component/snake/index.js",["44","45"],[],"import { useState, useLayoutEffect } from 'react'\n\n\nimport ScoreBar from '../ScoreBar'\nimport SnakeForm from '../SnakeForm'\nimport '../../App.css'\n\n\n\nconst Snake = ({ apple, applePos, loose, score }) => {\n    const [head, setHead] = useState([48, 48]) //top, left\n    const [play, setPlay] = useState(false)\n    const [body, setBody] = useState([])\n    const [direction, setDirection] = useState('ArrowRight') //setup for starts and checks snake does go in unauthorized direction\n    const [speed, setSpeed] = useState(200)\n\n    const appleTop = apple[0] + '%'\n    const appleLeft = apple[1] +  '%'\n\n    const headTop = head[0] + '%'\n    const headLeft = head[1] + '%'\n\n    //handle options form\n    const handleChange = e => {\n        setSpeed(parseInt(e.target.value))\n    }\n\n    const headPos = (direction) => {\n        switch(direction){\n          case \"ArrowRight\":\n            setHead([head[0], (head[1] + 2) % 100])\n            break\n          case \"ArrowLeft\":\n            setHead([head[0], (100 + (head[1] - 2)) % 100])\n            break\n          case \"ArrowDown\":\n            setHead([ (head[0] + 2) % 100, head[1]])\n            break\n          case \"ArrowUp\":\n            setHead([(100 + (head[0] - 2)) % 100, head[1]]);\n            break\n          default:\n            break;\n        }\n    }\n    \n    const handleKeyDown = e => {\n        e.preventDefault();\n        if(body.length > 0){\n            switch(e.key){\n                case \"ArrowUp\":\n                    if(direction === \"ArrowDown\" || direction === \"ArrowUp\"){\n                        return\n                    } \n                    break;\n                case \"ArrowDown\":\n                    if(direction === \"ArrowUp\" || direction === \"ArrowDown\"){\n                        return\n                    }\n                    break;\n                case \"ArrowRight\":\n                    if(direction === \"ArrowLeft\" || direction === \"ArrowRight\"){\n                        return\n                    }\n                    break;\n                case \"ArrowLeft\":\n                    if(direction === \"ArrowLeft\" || direction === \"ArrowRight\"){\n                        return\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n        if([\"ArrowUp\", \"ArrowLeft\", \"ArrowRight\", \"ArrowDown\"].includes(e.key)){\n            window.localStorage.setItem(\"snakeRunner\", JSON.stringify({'direction': e.key}))\n        }\n        // else if(e.key === \"Enter\"){\n        //     if(!play){\n        //         setPlay(!play);\n        //         setHead([head[0], head[1]])\n        //     }\n        // }\n    }\n\n    const clickPlay = () => {\n        if(!play){\n            setPlay(!play);\n            setHead([head[0], head[1] + 2])\n        }\n    }\n\n    useLayoutEffect(() => {\n        const bodySearch = 'o' + body.join('o').toString() + 'o'\n        console.log(bodySearch)\n        const headCheck = \"o\" + [head[0] + '%', head[1] + '%'].toString() + \"o\"\n        console.log(headCheck)\n        if(bodySearch.includes(headCheck)){\n            setPlay(false)\n            loose();\n        }\n        let unmounted = false\n       \n        const timer = setTimeout(() => {\n            if(!unmounted){\n                const storage = window.localStorage.getItem(\"snakeRunner\")\n                const newDirection = JSON.parse(storage)\n                if(play && [\"ArrowUp\", \"ArrowLeft\", \"ArrowRight\", \"ArrowDown\"].includes(newDirection.direction)){\n                    if(head[0] === apple[0] && head[1] === apple[1]){\n                        setBody([[headTop, headLeft], ...body])\n                        applePos()\n                    } else {\n                        if(body.length > 0){\n                            const newBody = body.slice(0, body.length - 1)\n                            newBody.unshift([headTop, headLeft])\n                            setBody(newBody)\n                        }\n                    }\n                    setDirection(newDirection.direction);\n                    headPos(newDirection.direction);\n                }   \n            }\n            return () => {unmounted = true;}\n        } \n        , speed);\n    }, [head])\n\n    return(\n        <div className='main' onKeyDown={handleKeyDown} tabIndex=\"0\">\n            <div className=\"flexColCenter sideDiv\">\n                <h1>The Snake</h1>\n                <p>This is the snake, you know the rules...\n                Press <span>Play !</span> to start playing and use the <span>arrow keys</span> on your keyboard to change the snake's direction.</p>\n                <SnakeForm handleChange={handleChange} speed={speed} play={play} clickPlay={clickPlay}/>\n                <ScoreBar score={score >= 0? score: 0} />\n            </div>\n            <div className='container'>\n                <div className='screen'>\n                    <div className=\"apple\" style={{top: appleTop, left: appleLeft }} />\n                    <div className=\"head\" style={{top: headTop, left: headLeft }}/>\n                    { body.length > 0 && body.map(bodyPart => \n                            <div className=\"bodyPart\" style={{top: bodyPart[0], left: bodyPart[1] }}/>\n\n                    )}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Snake;","/Users/raphaelhebert/Desktop/snake/src/component/ScoreBar.js",[],[],"/Users/raphaelhebert/Desktop/snake/src/component/Lost.js",[],[],"/Users/raphaelhebert/Desktop/snake/src/component/SnakeForm.js",[],[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":6,"column":8,"nodeType":"52","messageId":"53","endLine":6,"endColumn":16},{"ruleId":"54","severity":1,"message":"55","line":30,"column":31,"nodeType":"56","endLine":30,"endColumn":33,"suggestions":"57"},{"ruleId":"58","severity":1,"message":"59","line":35,"column":103,"nodeType":"60","messageId":"61","endLine":35,"endColumn":116},{"ruleId":"50","severity":1,"message":"62","line":104,"column":15,"nodeType":"52","messageId":"53","endLine":104,"endColumn":20},{"ruleId":"54","severity":1,"message":"63","line":126,"column":8,"nodeType":"56","endLine":126,"endColumn":14,"suggestions":"64"},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'ScoreBar' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'applePos'. Either include it or remove the dependency array.","ArrayExpression",["67"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'timer' is assigned a value but never used.","React Hook useLayoutEffect has missing dependencies: 'apple', 'applePos', 'body', 'headLeft', 'headPos', 'headTop', 'loose', 'play', and 'speed'. Either include them or remove the dependency array. If 'loose' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["68"],"no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},{"desc":"71","fix":"72"},"Update the dependencies array to be: [applePos]",{"range":"73","text":"74"},"Update the dependencies array to be: [apple, applePos, body, head, headLeft, headPos, headTop, loose, play, speed]",{"range":"75","text":"76"},[709,711],"[applePos]",[4177,4183],"[apple, applePos, body, head, headLeft, headPos, headTop, loose, play, speed]"]
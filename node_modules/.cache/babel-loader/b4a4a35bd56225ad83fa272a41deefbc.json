{"ast":null,"code":"var _jsxFileName = \"/Users/raphaelhebert/Desktop/snake/src/component/snake/index.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport '../../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Snake = _ref => {\n  _s();\n\n  let {\n    apple,\n    applePos,\n    loose\n  } = _ref;\n  const [head, setHead] = useState([48, 48]); //top, left\n\n  const [play, setPlay] = useState(false);\n  const [body, setBody] = useState([]);\n  const [direction, setDirection] = useState('ArrowRight'); //setup for starts and checks snake does go in unauthorized direction\n\n  const appleTop = apple[0] + '%';\n  const appleLeft = apple[1] + '%';\n  const headTop = head[0] + '%';\n  const headLeft = head[1] + '%';\n\n  const headPos = direction => {\n    switch (direction) {\n      case \"ArrowRight\":\n        setHead([head[0], (head[1] + 2) % 100]);\n        break;\n\n      case \"ArrowLeft\":\n        setHead([head[0], (100 + (head[1] - 2)) % 100]);\n        break;\n\n      case \"ArrowDown\":\n        setHead([(head[0] + 2) % 100, head[1]]);\n        break;\n\n      case \"ArrowUp\":\n        setHead([(100 + (head[0] - 2)) % 100, head[1]]);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleKeyDown = e => {\n    console.log(\"handleKeyDown\");\n    e.preventDefault();\n\n    if (e.key === \"Enter\") {\n      setPlay(!play);\n      setHead([head[0], head[1]]);\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"use effect\"); //check if head touches body\n\n    const bodySearch = 'o' + body.join('o').toString() + 'o';\n    const headCheck = \"o\" + [head[0] + '%', head[1] + '%'].toString() + \"o\";\n\n    if (bodySearch.includes(headCheck)) {\n      setPlay(false);\n      loose();\n    } //move the head to rerender at given speed\n\n\n    setTimeout(() => {\n      console.log('timing out'); //get the direction from local storage\n\n      const storage = window.localStorage.getItem(\"snakeRunner\");\n      const newDirection = JSON.parse(storage).direction; //check if the stored direction trigger allowed moves\n\n      if (body.length > 0) {\n        switch (direction) {\n          case \"ArrowUp\":\n            if (newDirection === \"ArrowDown\" || newDirection === \"ArrowUp\") {\n              return;\n            }\n\n            break;\n\n          case \"ArrowDown\":\n            if (newDirection === \"ArrowUp\" || newDirection === \"ArrowDown\") {\n              return;\n            }\n\n            break;\n\n          case \"ArrowRight\":\n            if (newDirection === \"ArrowLeft\" || newDirection === \"ArrowRight\") {\n              return;\n            }\n\n            break;\n\n          case \"ArrowLeft\":\n            if (newDirection === \"ArrowLeft\" || newDirection === \"ArrowRight\") {\n              return;\n            }\n\n            break;\n\n          default:\n            setDirection(newDirection);\n        }\n      } else {\n        setDirection(newDirection); //check if the direction from storage is a valid direction\n\n        if (play && [\"ArrowUp\", \"ArrowLeft\", \"ArrowRight\", \"ArrowDown\"].includes(direction)) {\n          //check if the head touches the body\n          if (head[0] === apple[0] && head[1] === apple[1]) {\n            setBody([[headTop, headLeft], ...body]);\n            applePos();\n          } else {\n            if (body.length > 0) {\n              const newBody = body.slice(0, body.length - 1);\n              newBody.unshift([headTop, headLeft]);\n              setBody(newBody);\n            }\n          }\n        }\n      }\n\n      headPos(direction);\n    }, 200);\n  }, [head]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      onKeyDown: handleKeyDown,\n      tabIndex: \"0\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"screen\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"apple\",\n            style: {\n              top: appleTop,\n              left: appleLeft\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"head\",\n            style: {\n              top: headTop,\n              left: headLeft\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 21\n          }, this), body.length > 0 && body.map(bodyPart => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bodyPart\",\n            style: {\n              top: bodyPart[0],\n              left: bodyPart[1]\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(Snake, \"gqI9UTyebHJQKrST1Ya8Cp3yttI=\");\n\n_c = Snake;\nexport default Snake;\n\nvar _c;\n\n$RefreshReg$(_c, \"Snake\");","map":{"version":3,"sources":["/Users/raphaelhebert/Desktop/snake/src/component/snake/index.js"],"names":["useState","useEffect","Snake","apple","applePos","loose","head","setHead","play","setPlay","body","setBody","direction","setDirection","appleTop","appleLeft","headTop","headLeft","headPos","handleKeyDown","e","console","log","preventDefault","key","bodySearch","join","toString","headCheck","includes","setTimeout","storage","window","localStorage","getItem","newDirection","JSON","parse","length","newBody","slice","unshift","top","left","map","bodyPart"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport '../../App.css'\n\nconst Snake = ({ apple, applePos, loose }) => {\n    const [head, setHead] = useState([48, 48]) //top, left\n    const [play, setPlay] = useState(false)\n    const [body, setBody] = useState([])\n    const [direction, setDirection] = useState('ArrowRight') //setup for starts and checks snake does go in unauthorized direction\n\n    const appleTop = apple[0] + '%'\n    const appleLeft = apple[1] +  '%'\n\n    const headTop = head[0] + '%'\n    const headLeft = head[1] + '%'\n\n   \n\n    const headPos = (direction) => {\n        switch(direction){\n          case \"ArrowRight\":\n            setHead([head[0], (head[1] + 2) % 100])\n            break\n          case \"ArrowLeft\":\n            setHead([head[0], (100 + (head[1] - 2)) % 100])\n            break\n          case \"ArrowDown\":\n            setHead([ (head[0] + 2) % 100, head[1]])\n            break\n          case \"ArrowUp\":\n            setHead([(100 + (head[0] - 2)) % 100, head[1]]);\n            break\n          default:\n            break;\n        }\n    }\n    \n    const handleKeyDown = e => {\n        console.log(\"handleKeyDown\")\n        e.preventDefault();     \n        if(e.key === \"Enter\"){\n            setPlay(!play);\n            setHead([head[0], head[1]])\n        }\n    }\n\n\n    useEffect(() => {\n\n        console.log(\"use effect\")\n        //check if head touches body\n        const bodySearch = 'o' + body.join('o').toString() + 'o'\n        const headCheck = \"o\" + [head[0] + '%', head[1] + '%'].toString() + \"o\"\n        if(bodySearch.includes(headCheck)){\n            setPlay(false)\n            loose();\n        }\n\n        //move the head to rerender at given speed\n        setTimeout(() => {\n            console.log('timing out')\n            //get the direction from local storage\n            const storage = window.localStorage.getItem(\"snakeRunner\")\n            const newDirection = JSON.parse(storage).direction\n\n            //check if the stored direction trigger allowed moves\n            if(body.length > 0){\n                switch(direction){\n                    case \"ArrowUp\":\n                        if(newDirection === \"ArrowDown\" || newDirection === \"ArrowUp\"){\n                            return\n                        } \n                        break;\n                    case \"ArrowDown\":\n                        if(newDirection === \"ArrowUp\" || newDirection === \"ArrowDown\"){\n                            return\n                        }\n                        break;\n                    case \"ArrowRight\":\n                        if(newDirection === \"ArrowLeft\" || newDirection === \"ArrowRight\"){\n                            return\n                        }\n                        break;\n                    case \"ArrowLeft\":\n                        if(newDirection === \"ArrowLeft\" || newDirection === \"ArrowRight\"){\n                            return\n                        }\n                        break;\n                    default:\n                       setDirection(newDirection)\n                }\n            } else {\n                setDirection(newDirection)\n                //check if the direction from storage is a valid direction\n                if(play && [\"ArrowUp\", \"ArrowLeft\", \"ArrowRight\", \"ArrowDown\"].includes(direction)){\n                    //check if the head touches the body\n                    if(head[0] === apple[0] && head[1] === apple[1]){\n                        setBody([[headTop, headLeft], ...body])\n                        applePos()\n                    } else {\n                        if(body.length > 0){\n                            const newBody = body.slice(0, body.length - 1)\n                            newBody.unshift([headTop, headLeft])\n                            setBody(newBody)\n                        }\n                    }\n                }     \n            }\n            headPos(direction);\n        }, 200)\n    }, [head])\n\n    return(\n        <>\n        <div className='main' onKeyDown={handleKeyDown} tabIndex=\"0\">\n            <div className='container'>\n                <div className='screen'>\n                    <div className=\"apple\" style={{top: appleTop, left: appleLeft }} />\n                    <div className=\"head\" style={{top: headTop, left: headLeft }}/>\n                    { body.length > 0 && body.map(bodyPart => \n                            <div className=\"bodyPart\" style={{top: bodyPart[0], left: bodyPart[1] }}/>\n    \n                    )}\n\n                </div>\n            </div>\n        </div>\n        </>\n    )\n}\n\nexport default Snake"]},"metadata":{},"sourceType":"module"}